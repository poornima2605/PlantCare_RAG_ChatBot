name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run basic FastAPI test
        run: |
          python -c "import uvicorn"

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/plantcare-chatbot:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/plantcare-chatbot:latest

  test-docker-image:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull Docker image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/plantcare-chatbot:latest

      - name: Run container
        run: |
          docker run -d --rm --name chatbot-test -p 8000:8000 -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} ${{ secrets.DOCKER_USERNAME }}/plantcare-chatbot
          sleep 100

      - name: Wait for app to start
        run: |
          for i in {1..10}; do
            echo "Checking if app is up (attempt $i)..."
            if curl -s http://localhost:8000/ask -X POST -H "Content-Type: application/json" -d '{"question":"test"}' | grep -q "answer"; then
              echo "App is up!"
              break
            fi
            sleep 5
          done

      - name: Run tests against container
        run: |
          pip install requests
          pip install pytest
          pytest tests/
      
      - name: Print container logs (if it fails)
        if: failure()
        run: docker logs chatbot-test || true

      - name: Stop container
        if: always()
        run: docker stop chatbot-test
    
  deploy-to-eks-cluster-and-test:
    runs-on: ubuntu-latest
    needs: test-docker-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name plantcare-cluster

      - name: Ensure OpenAI Secret exists
        run: |
          if ! kubectl get secret openai-api-secret > /dev/null 2>&1; then
            kubectl create secret generic openai-api-secret \
              --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          fi
      
      - name: Ensure Docker Secret exists
        run: |
          if ! kubectl get secret docker-credentials > /dev/null 2>&1; then
            kubectl create secret docker-registry docker-credentials \
              --docker-username=${{ secrets.DOCKER_USERNAME }} \
              --docker-password=${{ secrets.DOCKER_PASSWORD }} 
          fi

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          sleep 100

      - name: Wait for rollout to complete
        run: |
          kubectl rollout status deployment/plantcare-chatbot
      
      - name: Port forwarding to run Pytests
        run: |
          kubectl port-forward service/plantcare-chatbot-service 8000:80 &
          pytest
        
      - name: Scale deployment to zero
        run: |
          kubectl scale deployment plantcare-chatbot --replicas=0
  